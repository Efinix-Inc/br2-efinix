From 785c59bff8cf3b553e7308a3dd1d6feb91d12c4d Mon Sep 17 00:00:00 2001
From: Dolu1990 <charles.papon.90@gmail.com>
Date: Fri, 7 Jan 2022 16:09:52 +0800
Subject: [PATCH 4/5] drivers: add vexriscv timer driver

Signed-off-by: Dolu1990 <charles.papon.90@gmail.com>
Signed-off-by: Mohamad Noor Alim Hussin <mnalim@efinixinc.com>
---
 drivers/timer/Kconfig          |   6 ++
 drivers/timer/Makefile         |   1 +
 drivers/timer/vexriscv_timer.c | 110 +++++++++++++++++++++++++++++++++
 3 files changed, 117 insertions(+)
 create mode 100644 drivers/timer/vexriscv_timer.c

diff --git a/drivers/timer/Kconfig b/drivers/timer/Kconfig
index 637024445c..3fb3ee4e7e 100644
--- a/drivers/timer/Kconfig
+++ b/drivers/timer/Kconfig
@@ -149,6 +149,12 @@ config RISCV_TIMER
 	  Select this to enable support for the timer as defined
 	  by the RISC-V privileged architecture spec.
 
+config VEXRISCV_TIMER
+        bool "Vexriscv Timer"
+        depends on TIMER
+        help
+          Enables support for the Vexriscv Timer driver.
+
 config ROCKCHIP_TIMER
 	bool "Rockchip timer support"
 	depends on TIMER
diff --git a/drivers/timer/Makefile b/drivers/timer/Makefile
index c22ffebcde..ebe6993251 100644
--- a/drivers/timer/Makefile
+++ b/drivers/timer/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_NOMADIK_MTU_TIMER)	+= nomadik-mtu-timer.o
 obj-$(CONFIG_OMAP_TIMER)	+= omap-timer.o
 obj-$(CONFIG_RENESAS_OSTM_TIMER) += ostm_timer.o
 obj-$(CONFIG_RISCV_TIMER) += riscv_timer.o
+obj-$(CONFIG_VEXRISCV_TIMER) += vexriscv_timer.o
 obj-$(CONFIG_ROCKCHIP_TIMER) += rockchip_timer.o
 obj-$(CONFIG_SANDBOX_TIMER)	+= sandbox_timer.o
 obj-$(CONFIG_STI_TIMER)		+= sti-timer.o
diff --git a/drivers/timer/vexriscv_timer.c b/drivers/timer/vexriscv_timer.c
new file mode 100644
index 0000000000..290972e33b
--- /dev/null
+++ b/drivers/timer/vexriscv_timer.c
@@ -0,0 +1,110 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 roman3017 <rbacik@hotmail.com>
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <dm.h>
+#include <clk.h>
+#include <timer.h>
+
+struct vexriscv_platdata {
+	fdt_addr_t regs;
+	u32 clock_rate;
+};
+
+static int vexriscv_get_count(struct udevice *dev, u64 *count)
+{
+	struct vexriscv_platdata *platdata;
+	u32 hi, lo;
+
+  platdata = dev_get_platdata(dev);
+	do {
+		hi = readl((void *)(platdata->regs + 0x4));
+		lo = readl((void *)(platdata->regs + 0x0));
+	} while (readl((void *)(platdata->regs + 0x4)) != hi);
+	*count = (((u64)hi) << 32) | lo;
+
+	return 0;
+}
+
+#if CONFIG_IS_ENABLED(OF_CONTROL) && !CONFIG_IS_ENABLED(OF_PLATDATA)
+static int vexriscv_ofdata_to_platdata(struct udevice *dev)
+{
+	struct vexriscv_platdata *platdata;
+	struct timer_dev_priv *uc_priv;
+	int ret;
+
+  platdata = dev_get_platdata(dev);
+	platdata->regs = dev_read_addr(dev);
+	if (IS_ERR((void *)platdata->regs))
+		return PTR_ERR((void *)platdata->regs);
+	uc_priv = dev_get_uclass_priv(dev);
+	ret = dev_read_u32(dev, "clock-frequency", (u32 *)&uc_priv->clock_rate);
+	if (IS_ERR_VALUE(ret)) {
+		debug("Timer clock-frequency not defined\n");
+	} else {
+		platdata->clock_rate = uc_priv->clock_rate;
+	}
+
+	return 0;
+}
+#endif
+
+static int vexriscv_probe(struct udevice *dev)
+{
+	struct vexriscv_platdata *platdata;
+	struct timer_dev_priv *uc_priv;
+
+	debug("%s:%d\n",__func__,__LINE__);
+	platdata = dev_get_platdata(dev);
+  writel(0xFFFFFFFF, (void *)(platdata->regs + 0xC));
+  writel(0xFFFFFFFF, (void *)(platdata->regs + 0x8));
+  writel(0x7FFFFFFF, (void *)(platdata->regs + 0xC));
+	uc_priv = dev_get_uclass_priv(dev);
+	uc_priv->clock_rate = platdata->clock_rate;
+
+	return 0;
+}
+
+static int vexriscv_bind(struct udevice *dev)
+{
+	debug("%s:%d\n",__func__,__LINE__);
+	return 0;
+}
+
+static const struct timer_ops vexriscv_ops = {
+	.get_count	= vexriscv_get_count,
+};
+
+#if CONFIG_IS_ENABLED(OF_CONTROL) && !CONFIG_IS_ENABLED(OF_PLATDATA)
+static const struct udevice_id vexriscv_of_match[] = {
+	{ .compatible = "vexriscv,timer" },
+	{}
+};
+#endif
+
+U_BOOT_DRIVER(vexriscv_timer) = {
+	.name = "vexriscv_timer",
+	.id = UCLASS_TIMER,
+	.ops = &vexriscv_ops,
+	.probe = vexriscv_probe,
+	.bind = vexriscv_bind,
+#if CONFIG_IS_ENABLED(OF_CONTROL) && !CONFIG_IS_ENABLED(OF_PLATDATA)
+	.of_match	= vexriscv_of_match,
+	.ofdata_to_platdata = vexriscv_ofdata_to_platdata,
+	.platdata_auto_alloc_size = sizeof(struct vexriscv_platdata),
+#endif
+};
+
+#if !CONFIG_IS_ENABLED(OF_CONTROL) || CONFIG_IS_ENABLED(OF_PLATDATA)
+static const struct vexriscv_platdata timer_vexriscv_info_non_fdt = {
+  .regs = (fdt_addr_t)0x10008000,
+	.clock_rate = CONFIG_DEBUG_UART_CLOCK,
+};
+U_BOOT_DEVICE(timer_vexriscv_non_fdt) = {
+  .name = "vexriscv_timer",
+  .platdata = &timer_vexriscv_info_non_fdt,
+};
+#endif /*!CONFIG_IS_ENABLED(OF_CONTROL) || CONFIG_IS_ENABLED(OF_PLATDATA)*/
\ No newline at end of file
-- 
2.17.1

