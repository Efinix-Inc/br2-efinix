From 7616b390dfecddebb02c9cf5a11f065ad2cde6c0 Mon Sep 17 00:00:00 2001
From: Dolu1990 <charles.papon.90@gmail.com>
Date: Wed, 12 Jan 2022 15:14:51 +0800
Subject: [PATCH 1/5] arch/riscv: add saxon support

Signed-off-by: Dolu1990 <charles.papon.90@gmail.com>
Signed-off-by: Mohamad Noor Alim Hussin <mnalim@efinixinc.com>
---
 arch/riscv/Kconfig            |   4 ++
 arch/riscv/dts/Makefile       |   1 +
 arch/riscv/lib/Makefile       |   2 +
 arch/riscv/lib/ashldi3.c      |  25 ++++++++
 arch/riscv/lib/libgcc.h       |  25 ++++++++
 arch/riscv/lib/lshrdi3.c      |  25 ++++++++
 board/vexriscv/saxon/Kconfig  |  22 +++++++
 board/vexriscv/saxon/Makefile |   5 ++
 board/vexriscv/saxon/saxon.c  | 105 ++++++++++++++++++++++++++++++++++
 include/configs/saxon.h       |  32 +++++++++++
 10 files changed, 246 insertions(+)
 create mode 100644 arch/riscv/lib/ashldi3.c
 create mode 100644 arch/riscv/lib/libgcc.h
 create mode 100644 arch/riscv/lib/lshrdi3.c
 create mode 100644 board/vexriscv/saxon/Kconfig
 create mode 100644 board/vexriscv/saxon/Makefile
 create mode 100644 board/vexriscv/saxon/saxon.c
 create mode 100644 include/configs/saxon.h

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index 55eaee2da6..e82ac75a27 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -23,6 +23,9 @@ config TARGET_SIFIVE_FU540
 config TARGET_SIPEED_MAIX
 	bool "Support Sipeed Maix Board"
 
+config TARGET_VEXRISCV_SAXON
+       bool "Support Saxon Board"
+
 endchoice
 
 config SYS_ICACHE_OFF
@@ -57,6 +60,7 @@ source "board/emulation/qemu-riscv/Kconfig"
 source "board/microchip/mpfs_icicle/Kconfig"
 source "board/sifive/fu540/Kconfig"
 source "board/sipeed/maix/Kconfig"
+source "board/vexriscv/saxon/Kconfig"
 
 # platform-specific options below
 source "arch/riscv/cpu/ax25/Kconfig"
diff --git a/arch/riscv/dts/Makefile b/arch/riscv/dts/Makefile
index 01331b0aa1..bc6c219144 100644
--- a/arch/riscv/dts/Makefile
+++ b/arch/riscv/dts/Makefile
@@ -4,6 +4,7 @@ dtb-$(CONFIG_TARGET_AX25_AE350) += ae350_32.dtb ae350_64.dtb
 dtb-$(CONFIG_TARGET_SIFIVE_FU540) += hifive-unleashed-a00.dtb
 dtb-$(CONFIG_TARGET_SIPEED_MAIX) += k210-maix-bit.dtb
 dtb-$(CONFIG_TARGET_MICROCHIP_ICICLE) += microchip-mpfs-icicle-kit.dtb
+dtb-$(CONFIG_TARGET_VEXRISCV_SAXON) += uboot.dtb
 
 targets += $(dtb-y)
 
diff --git a/arch/riscv/lib/Makefile b/arch/riscv/lib/Makefile
index 12c14f2019..f6f0fd8e0e 100644
--- a/arch/riscv/lib/Makefile
+++ b/arch/riscv/lib/Makefile
@@ -25,6 +25,8 @@ obj-y   += setjmp.o
 obj-$(CONFIG_$(SPL_)SMP) += smp.o
 obj-$(CONFIG_SPL_BUILD)	+= spl.o
 obj-y   += fdt_fixup.o
+obj-y += ashldi3.o
+obj-y += lshrdi3.o
 
 # For building EFI apps
 CFLAGS_$(EFI_CRT0) := $(CFLAGS_EFI)
diff --git a/arch/riscv/lib/ashldi3.c b/arch/riscv/lib/ashldi3.c
new file mode 100644
index 0000000000..9b50d866a0
--- /dev/null
+++ b/arch/riscv/lib/ashldi3.c
@@ -0,0 +1,25 @@
+#include "libgcc.h"
+
+long long __ashldi3(long long u, word_type b)
+{
+	DWunion uu, w;
+	word_type bm;
+
+	if (b == 0)
+		return u;
+
+	uu.ll = u;
+	bm = 32 - b;
+
+	if (bm <= 0) {
+		w.s.low = 0;
+		w.s.high = (unsigned int) uu.s.low << -bm;
+	} else {
+		const unsigned int carries = (unsigned int) uu.s.low >> bm;
+
+		w.s.low = (unsigned int) uu.s.low << b;
+		w.s.high = ((unsigned int) uu.s.high << b) | carries;
+	}
+
+	return w.ll;
+}
diff --git a/arch/riscv/lib/libgcc.h b/arch/riscv/lib/libgcc.h
new file mode 100644
index 0000000000..05909d58e2
--- /dev/null
+++ b/arch/riscv/lib/libgcc.h
@@ -0,0 +1,25 @@
+#ifndef __ASM_LIBGCC_H
+#define __ASM_LIBGCC_H
+
+#include <asm/byteorder.h>
+
+typedef int word_type __attribute__ ((mode (__word__)));
+
+#ifdef __BIG_ENDIAN
+struct DWstruct {
+	int high, low;
+};
+#elif defined(__LITTLE_ENDIAN)
+struct DWstruct {
+	int low, high;
+};
+#else
+#error I feel sick.
+#endif
+
+typedef union {
+	struct DWstruct s;
+	long long ll;
+} DWunion;
+
+#endif /* __ASM_LIBGCC_H */
diff --git a/arch/riscv/lib/lshrdi3.c b/arch/riscv/lib/lshrdi3.c
new file mode 100644
index 0000000000..bb340accba
--- /dev/null
+++ b/arch/riscv/lib/lshrdi3.c
@@ -0,0 +1,25 @@
+#include "libgcc.h"
+
+long long __lshrdi3(long long u, word_type b)
+{
+	DWunion uu, w;
+	word_type bm;
+
+	if (b == 0)
+		return u;
+
+	uu.ll = u;
+	bm = 32 - b;
+
+	if (bm <= 0) {
+		w.s.high = 0;
+		w.s.low = (unsigned int) uu.s.high >> -bm;
+	} else {
+		const unsigned int carries = (unsigned int) uu.s.high << bm;
+
+		w.s.high = (unsigned int) uu.s.high >> b;
+		w.s.low = ((unsigned int) uu.s.low >> b) | carries;
+	}
+
+	return w.ll;
+}
diff --git a/board/vexriscv/saxon/Kconfig b/board/vexriscv/saxon/Kconfig
new file mode 100644
index 0000000000..55d0a560af
--- /dev/null
+++ b/board/vexriscv/saxon/Kconfig
@@ -0,0 +1,22 @@
+if TARGET_VEXRISCV_SAXON
+
+config SYS_BOARD
+	default "saxon"
+
+config SYS_VENDOR
+	default "vexriscv"
+
+config SYS_CPU
+	default "generic"
+
+config SYS_CONFIG_NAME
+	default "saxon"
+
+config SYS_TEXT_BASE
+	default 0x80000000
+
+config BOARD_SPECIFIC_OPTIONS # dummy
+	def_bool y
+	select GENERIC_RISCV
+
+endif
diff --git a/board/vexriscv/saxon/Makefile b/board/vexriscv/saxon/Makefile
new file mode 100644
index 0000000000..a666aeb07f
--- /dev/null
+++ b/board/vexriscv/saxon/Makefile
@@ -0,0 +1,5 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# Copyright (C) 2019 roman3017 <rbacik@hotmail.com>
+
+obj-y	+= saxon.o
diff --git a/board/vexriscv/saxon/saxon.c b/board/vexriscv/saxon/saxon.c
new file mode 100644
index 0000000000..895c1867cc
--- /dev/null
+++ b/board/vexriscv/saxon/saxon.c
@@ -0,0 +1,105 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 roman3017 <rbacik@hotmail.com>
+ *
+ */
+
+#include <common.h>
+#include <spl.h>
+#include <log.h>
+
+int board_init(void)
+{
+	debug("%s\n",__func__);
+	return 0;
+}
+
+#ifdef CONFIG_SPL_BUILD
+DECLARE_GLOBAL_DATA_PTR;
+
+void spl_board_init(void)
+{
+	debug("%s\n",__func__);
+}
+u32 spl_boot_device(void)
+{
+#ifdef CONFIG_SPL_MMC_SUPPORT
+	return BOOT_DEVICE_MMC1;
+#endif
+	return BOOT_DEVICE_NONE;
+}
+
+#ifdef CONFIG_SPL_OS_BOOT
+int spl_start_uboot(void)
+{
+	debug("%s\n",__func__);
+	return 0;
+}
+void spl_perform_fixups(struct spl_image_info *spl_image)
+{
+	spl_image->os = IH_OS_LINUX;
+	spl_image->arg = (void *)CONFIG_SYS_SPL_ARGS_ADDR;
+	spl_image->entry_point = CONFIG_SYS_SPL_KERNEL_ADDR;
+}
+void __noreturn jump_to_image_linux(struct spl_image_info *spl_image)
+{
+	printf("Entering kernel: 0x%x, arg pointer: 0x%x\n", (u32)spl_image->entry_point, (u32)spl_image->arg);
+	typedef void (*image_entry_arg_t)(ulong, void *)
+		__attribute__ ((noreturn));
+	image_entry_arg_t kernel =
+		(image_entry_arg_t)spl_image->entry_point;
+	kernel(gd->arch.boot_hart, spl_image->arg);
+}
+#endif /* CONFIG_SPL_OS_BOOT */
+
+/* DO NOT enable SPL_OF_LIBFDT without SPL_OF_CONTROL */
+#if !defined(CONFIG_SPL_OF_LIBFDT)
+s32 fdtdec_get_int(const void *blob, int node, const char *prop_name, s32 default_val)
+{
+	debug("%s\n",__func__);
+	return -1;
+}
+const void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)
+{
+	debug("%s\n",__func__);
+	return NULL;
+}
+int fdt_first_subnode(const void *fdt, int offset)
+{
+	debug("%s\n",__func__);
+	return -1;
+}
+int fdt_next_subnode(const void *fdt, int offset)
+{
+	debug("%s\n",__func__);
+	return -1;
+}
+int fdt_path_offset(const void *fdt, const char *path)
+{
+	debug("%s\n",__func__);
+	return -1;
+}
+int fdtdec_setup_mem_size_base(void)
+{
+	debug("%s\n",__func__);
+	gd->ram_base = CONFIG_SYS_SPL_RAM_BASE;
+	gd->ram_size = CONFIG_SYS_SPL_RAM_SIZE;
+	gd->ram_top = gd->ram_base + gd->ram_size - 1;
+	return 0;
+}
+int fdtdec_setup_memory_banksize(void)
+{
+	debug("%s\n",__func__);
+	gd->bd->bi_memstart = gd->ram_base;
+	gd->bd->bi_memsize = gd->ram_size;
+	gd->bd->bi_dram[0].start = gd->ram_base;
+	gd->bd->bi_dram[0].size = gd->ram_size;
+	return 0;
+}
+int dm_scan_fdt_dev(struct udevice *dev)
+{
+	debug("%s\n",__func__);
+	return 0;
+}
+#endif /* !CONFIG_SPL_OF_LIBFDT */
+#endif /* CONFIG_SPL_BUILD */
diff --git a/include/configs/saxon.h b/include/configs/saxon.h
new file mode 100644
index 0000000000..cbb0c3d76d
--- /dev/null
+++ b/include/configs/saxon.h
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2019 roman3017 <rbacik@hotmail.com>
+ *
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <linux/sizes.h>
+
+/* assuming Text Base is not bottom of memory for INIT_SP to work */
+#define CONFIG_SYS_LOAD_ADDR CONFIG_SYS_TEXT_BASE
+#define CONFIG_SYS_INIT_SP_ADDR CONFIG_SYS_LOAD_ADDR
+#define CONFIG_SYS_MALLOC_LEN SZ_256K
+#define CONFIG_EXTRA_ENV_SETTINGS "initrd_high=0xffffffff\0" \
+                                  "fdt_high=0xffffffff\0"
+#ifdef CONFIG_SPL_BUILD
+#define CONFIG_SYS_SPL_RAM_BASE 0x80000000
+#define CONFIG_SYS_SPL_RAM_SIZE (SZ_8M)
+#define CONFIG_SPL_MAX_SIZE CONFIG_SPL_SIZE_LIMIT
+#define CONFIG_SPL_BSS_MAX_SIZE (SZ_4K)
+//#define CONFIG_SPL_BSS_START_ADDR (CONFIG_SYS_SPL_RAM_BASE-SZ_1M)
+#define CONFIG_SPL_BSS_START_ADDR (IMAGE_TEXT_BASE+CONFIG_SPL_MAX_SIZE-CONFIG_SPL_BSS_MAX_SIZE)
+#define CONFIG_SYS_MMCSD_RAW_MODE_KERNEL_SECTOR 0
+#define CONFIG_SYS_MMCSD_FS_BOOT_PARTITION 1
+#define CONFIG_SYS_SPL_ARGS_ADDR 0x80007000
+#define CONFIG_SYS_SPL_KERNEL_ADDR 0x80008000
+#define CONFIG_SPL_FS_LOAD_ARGS_NAME "dtb"
+#define CONFIG_SPL_FS_LOAD_KERNEL_NAME CONFIG_SPL_PAYLOAD
+#endif /* CONFIG_SPL_BUILD */
+#endif /* __CONFIG_H */
-- 
2.17.1

